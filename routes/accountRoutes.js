const express = require("express");
const router = express.Router();
const Account = require("../models/Account");

router.get("/", async (req, res) => {
  try {
    const data = await Account.find({});
    res.json(data);
  } catch (error) {
    res.status(500).send({ message: "Error fetching accounts", error });
  }
});

// Tạo tài khoản
router.post("/", async (req, res) => {
  try {
    const { userName, password, email, role } = req.body;

    // Validate input
    if (!userName || !password || !email) {
      return res.status(400).json({
        message: "Vui lòng điền đầy đủ thông tin (userName, password, email)",
      });
    }

    // Check if user already exists
    const existingAccount = await Account.findOne({
      $or: [{ userName }, { email }],
    });

    if (existingAccount) {
      return res.status(400).json({
        message: "Tên đăng nhập hoặc email đã tồn tại",
      });
    }

    // Create new account (id will be auto-generated by pre-save hook)
    const newAccount = new Account({
      userName,
      password,
      email,
      role: role || "customer",
    });

    const savedAccount = await newAccount.save();

    // Don't send password back to client
    const accountResponse = savedAccount.toObject();
    delete accountResponse.password;

    res.status(201).json({
      message: "Tài khoản đã được lưu thành công",
      account: accountResponse,
    });
  } catch (error) {
    console.error("Lỗi khi lưu tài khoản:", error);
    res.status(500).json({
      message: "Lỗi khi lưu tài khoản",
      error: error.message,
    });
  }
});

// Cập nhật tài khoản
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const { userName, password, email, role } = req.body;

  try {
    // Try to find by custom id first, fallback to _id
    const updatedAccount = await Account.findOneAndUpdate(
      { $or: [{ id: id }, { _id: id }] },
      { userName, password, email, role },
      { new: true, runValidators: true }
    );

    if (!updatedAccount) {
      return res.status(404).json({ message: "Không tìm thấy tài khoản" });
    }

    // Don't send password back
    const accountResponse = updatedAccount.toObject();
    delete accountResponse.password;

    res.status(200).json({
      message: "Cập nhật tài khoản thành công",
      updatedAccount: accountResponse,
    });
  } catch (error) {
    console.error("Lỗi khi cập nhật tài khoản:", error);
    res.status(500).json({
      message: "Lỗi khi cập nhật tài khoản",
      error: error.message,
    });
  }
});

// Xóa tài khoản
router.delete("/:id", async (req, res) => {
  const { id } = req.params;

  try {
    // Xóa tài khoản theo id (dùng id hoặc _id tùy theo thiết kế)
    const deletedAccount = await Account.findOneAndDelete({ id: id });

    if (!deletedAccount) {
      return res.status(404).json({ message: "Account not found" });
    }

    // Lấy tất cả tài khoản hiện có
    let accounts = await Account.find();

    // Cập nhật lại id cho các tài khoản
    for (let i = 0; i < accounts.length; i++) {
      accounts[i].id = (i + 1).toString();
      await accounts[i].save(); // Lưu lại các thay đổi
    }

    // Sau khi cập nhật lại id, sắp xếp lại các tài khoản theo id
    accounts = await Account.find().sort({ id: 1 });

    res.status(200).json({
      message: "Account deleted and IDs updated successfully",
      deletedAccount,
    });
  } catch (error) {
    console.error("Lỗi khi xóa tài khoản:", error);
    res.status(500).json({ message: "Lỗi khi xóa tài khoản", error });
  }
});

router.get("/search", async (req, res) => {
  const { userName } = req.query;
  try {
    if (userName) {
      const results = await Customer.find({
        userName: { $regex: userName, $options: "i" },
      });
      return res.json(results);
    }
    const allCustomers = await Customer.find({});
    res.json(allCustomers);
  } catch (error) {
    res.status(500).send({ message: "Error searching customers", error });
  }
});

module.exports = router;
